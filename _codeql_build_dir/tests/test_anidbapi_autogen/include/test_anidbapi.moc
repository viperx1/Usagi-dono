/****************************************************************************
** Meta object code from reading C++ file 'test_anidbapi.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.4.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'test_anidbapi.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.4.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
namespace {
struct qt_meta_stringdata_TestAniDBApiCommands_t {
    uint offsetsAndSizes[48];
    char stringdata0[21];
    char stringdata1[13];
    char stringdata2[1];
    char stringdata3[16];
    char stringdata4[8];
    char stringdata5[22];
    char stringdata6[24];
    char stringdata7[25];
    char stringdata8[36];
    char stringdata9[26];
    char stringdata10[22];
    char stringdata11[21];
    char stringdata12[25];
    char stringdata13[28];
    char stringdata14[25];
    char stringdata15[25];
    char stringdata16[28];
    char stringdata17[25];
    char stringdata18[27];
    char stringdata19[33];
    char stringdata20[29];
    char stringdata21[38];
    char stringdata22[38];
    char stringdata23[51];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(sizeof(qt_meta_stringdata_TestAniDBApiCommands_t::offsetsAndSizes) + ofs), len 
Q_CONSTINIT static const qt_meta_stringdata_TestAniDBApiCommands_t qt_meta_stringdata_TestAniDBApiCommands = {
    {
        QT_MOC_LITERAL(0, 20),  // "TestAniDBApiCommands"
        QT_MOC_LITERAL(21, 12),  // "initTestCase"
        QT_MOC_LITERAL(34, 0),  // ""
        QT_MOC_LITERAL(35, 15),  // "cleanupTestCase"
        QT_MOC_LITERAL(51, 7),  // "cleanup"
        QT_MOC_LITERAL(59, 21),  // "testAuthCommandFormat"
        QT_MOC_LITERAL(81, 23),  // "testLogoutCommandFormat"
        QT_MOC_LITERAL(105, 24),  // "testMylistAddBasicFormat"
        QT_MOC_LITERAL(130, 35),  // "testMylistAddWithOptionalPara..."
        QT_MOC_LITERAL(166, 25),  // "testMylistAddWithEditFlag"
        QT_MOC_LITERAL(192, 21),  // "testFileCommandFormat"
        QT_MOC_LITERAL(214, 20),  // "testFileCommandMasks"
        QT_MOC_LITERAL(235, 24),  // "testMylistCommandWithLid"
        QT_MOC_LITERAL(260, 27),  // "testMylistStatCommandFormat"
        QT_MOC_LITERAL(288, 24),  // "testEpisodeCommandFormat"
        QT_MOC_LITERAL(313, 24),  // "testCommandNamesAreValid"
        QT_MOC_LITERAL(338, 27),  // "testNotifyListCommandFormat"
        QT_MOC_LITERAL(366, 24),  // "testPushAckCommandFormat"
        QT_MOC_LITERAL(391, 26),  // "testNotifyGetCommandFormat"
        QT_MOC_LITERAL(418, 32),  // "testAllCommandsHaveProperSpacing"
        QT_MOC_LITERAL(451, 28),  // "testNotificationsTableExists"
        QT_MOC_LITERAL(480, 37),  // "testMylistAddResponseStoredIn..."
        QT_MOC_LITERAL(518, 37),  // "testMylistEditResponseUpdates..."
        QT_MOC_LITERAL(556, 50)   // "testNotifyCheckIntervalNotInc..."
    },
    "TestAniDBApiCommands",
    "initTestCase",
    "",
    "cleanupTestCase",
    "cleanup",
    "testAuthCommandFormat",
    "testLogoutCommandFormat",
    "testMylistAddBasicFormat",
    "testMylistAddWithOptionalParameters",
    "testMylistAddWithEditFlag",
    "testFileCommandFormat",
    "testFileCommandMasks",
    "testMylistCommandWithLid",
    "testMylistStatCommandFormat",
    "testEpisodeCommandFormat",
    "testCommandNamesAreValid",
    "testNotifyListCommandFormat",
    "testPushAckCommandFormat",
    "testNotifyGetCommandFormat",
    "testAllCommandsHaveProperSpacing",
    "testNotificationsTableExists",
    "testMylistAddResponseStoredInDatabase",
    "testMylistEditResponseUpdatesDatabase",
    "testNotifyCheckIntervalNotIncreasedWhenNotLoggedIn"
};
#undef QT_MOC_LITERAL
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_TestAniDBApiCommands[] = {

 // content:
      10,       // revision
       0,       // classname
       0,    0, // classinfo
      22,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,  146,    2, 0x08,    1 /* Private */,
       3,    0,  147,    2, 0x08,    2 /* Private */,
       4,    0,  148,    2, 0x08,    3 /* Private */,
       5,    0,  149,    2, 0x08,    4 /* Private */,
       6,    0,  150,    2, 0x08,    5 /* Private */,
       7,    0,  151,    2, 0x08,    6 /* Private */,
       8,    0,  152,    2, 0x08,    7 /* Private */,
       9,    0,  153,    2, 0x08,    8 /* Private */,
      10,    0,  154,    2, 0x08,    9 /* Private */,
      11,    0,  155,    2, 0x08,   10 /* Private */,
      12,    0,  156,    2, 0x08,   11 /* Private */,
      13,    0,  157,    2, 0x08,   12 /* Private */,
      14,    0,  158,    2, 0x08,   13 /* Private */,
      15,    0,  159,    2, 0x08,   14 /* Private */,
      16,    0,  160,    2, 0x08,   15 /* Private */,
      17,    0,  161,    2, 0x08,   16 /* Private */,
      18,    0,  162,    2, 0x08,   17 /* Private */,
      19,    0,  163,    2, 0x08,   18 /* Private */,
      20,    0,  164,    2, 0x08,   19 /* Private */,
      21,    0,  165,    2, 0x08,   20 /* Private */,
      22,    0,  166,    2, 0x08,   21 /* Private */,
      23,    0,  167,    2, 0x08,   22 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

Q_CONSTINIT const QMetaObject TestAniDBApiCommands::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_TestAniDBApiCommands.offsetsAndSizes,
    qt_meta_data_TestAniDBApiCommands,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_TestAniDBApiCommands_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<TestAniDBApiCommands, std::true_type>,
        // method 'initTestCase'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'cleanupTestCase'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'cleanup'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testAuthCommandFormat'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testLogoutCommandFormat'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testMylistAddBasicFormat'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testMylistAddWithOptionalParameters'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testMylistAddWithEditFlag'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testFileCommandFormat'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testFileCommandMasks'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testMylistCommandWithLid'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testMylistStatCommandFormat'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testEpisodeCommandFormat'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testCommandNamesAreValid'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testNotifyListCommandFormat'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testPushAckCommandFormat'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testNotifyGetCommandFormat'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testAllCommandsHaveProperSpacing'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testNotificationsTableExists'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testMylistAddResponseStoredInDatabase'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testMylistEditResponseUpdatesDatabase'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testNotifyCheckIntervalNotIncreasedWhenNotLoggedIn'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void TestAniDBApiCommands::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<TestAniDBApiCommands *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->cleanup(); break;
        case 3: _t->testAuthCommandFormat(); break;
        case 4: _t->testLogoutCommandFormat(); break;
        case 5: _t->testMylistAddBasicFormat(); break;
        case 6: _t->testMylistAddWithOptionalParameters(); break;
        case 7: _t->testMylistAddWithEditFlag(); break;
        case 8: _t->testFileCommandFormat(); break;
        case 9: _t->testFileCommandMasks(); break;
        case 10: _t->testMylistCommandWithLid(); break;
        case 11: _t->testMylistStatCommandFormat(); break;
        case 12: _t->testEpisodeCommandFormat(); break;
        case 13: _t->testCommandNamesAreValid(); break;
        case 14: _t->testNotifyListCommandFormat(); break;
        case 15: _t->testPushAckCommandFormat(); break;
        case 16: _t->testNotifyGetCommandFormat(); break;
        case 17: _t->testAllCommandsHaveProperSpacing(); break;
        case 18: _t->testNotificationsTableExists(); break;
        case 19: _t->testMylistAddResponseStoredInDatabase(); break;
        case 20: _t->testMylistEditResponseUpdatesDatabase(); break;
        case 21: _t->testNotifyCheckIntervalNotIncreasedWhenNotLoggedIn(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject *TestAniDBApiCommands::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestAniDBApiCommands::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestAniDBApiCommands.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestAniDBApiCommands::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 22)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 22;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 22)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 22;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
