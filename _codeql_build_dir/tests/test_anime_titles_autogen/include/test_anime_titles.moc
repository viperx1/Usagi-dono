/****************************************************************************
** Meta object code from reading C++ file 'test_anime_titles.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.4.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'test_anime_titles.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.4.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
namespace {
struct qt_meta_stringdata_TestAnimeTitles_t {
    uint offsetsAndSizes[26];
    char stringdata0[16];
    char stringdata1[13];
    char stringdata2[1];
    char stringdata3[16];
    char stringdata4[8];
    char stringdata5[27];
    char stringdata6[31];
    char stringdata7[36];
    char stringdata8[33];
    char stringdata9[29];
    char stringdata10[27];
    char stringdata11[42];
    char stringdata12[34];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(sizeof(qt_meta_stringdata_TestAnimeTitles_t::offsetsAndSizes) + ofs), len 
Q_CONSTINIT static const qt_meta_stringdata_TestAnimeTitles_t qt_meta_stringdata_TestAnimeTitles = {
    {
        QT_MOC_LITERAL(0, 15),  // "TestAnimeTitles"
        QT_MOC_LITERAL(16, 12),  // "initTestCase"
        QT_MOC_LITERAL(29, 0),  // ""
        QT_MOC_LITERAL(30, 15),  // "cleanupTestCase"
        QT_MOC_LITERAL(46, 7),  // "cleanup"
        QT_MOC_LITERAL(54, 26),  // "testAnimeTitlesTableExists"
        QT_MOC_LITERAL(81, 30),  // "testLastUpdateTimestampStorage"
        QT_MOC_LITERAL(112, 35),  // "testShouldUpdateWhenNeverDown..."
        QT_MOC_LITERAL(148, 32),  // "testShouldNotUpdateWithin24Hours"
        QT_MOC_LITERAL(181, 28),  // "testShouldUpdateAfter24Hours"
        QT_MOC_LITERAL(210, 26),  // "testParseAnimeTitlesFormat"
        QT_MOC_LITERAL(237, 41),  // "testParseAnimeTitlesWithSpeci..."
        QT_MOC_LITERAL(279, 33)   // "testParseAnimeTitlesSkipsComm..."
    },
    "TestAnimeTitles",
    "initTestCase",
    "",
    "cleanupTestCase",
    "cleanup",
    "testAnimeTitlesTableExists",
    "testLastUpdateTimestampStorage",
    "testShouldUpdateWhenNeverDownloaded",
    "testShouldNotUpdateWithin24Hours",
    "testShouldUpdateAfter24Hours",
    "testParseAnimeTitlesFormat",
    "testParseAnimeTitlesWithSpecialCharacters",
    "testParseAnimeTitlesSkipsComments"
};
#undef QT_MOC_LITERAL
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_TestAnimeTitles[] = {

 // content:
      10,       // revision
       0,       // classname
       0,    0, // classinfo
      11,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,   80,    2, 0x08,    1 /* Private */,
       3,    0,   81,    2, 0x08,    2 /* Private */,
       4,    0,   82,    2, 0x08,    3 /* Private */,
       5,    0,   83,    2, 0x08,    4 /* Private */,
       6,    0,   84,    2, 0x08,    5 /* Private */,
       7,    0,   85,    2, 0x08,    6 /* Private */,
       8,    0,   86,    2, 0x08,    7 /* Private */,
       9,    0,   87,    2, 0x08,    8 /* Private */,
      10,    0,   88,    2, 0x08,    9 /* Private */,
      11,    0,   89,    2, 0x08,   10 /* Private */,
      12,    0,   90,    2, 0x08,   11 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

Q_CONSTINIT const QMetaObject TestAnimeTitles::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_TestAnimeTitles.offsetsAndSizes,
    qt_meta_data_TestAnimeTitles,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_TestAnimeTitles_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<TestAnimeTitles, std::true_type>,
        // method 'initTestCase'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'cleanupTestCase'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'cleanup'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testAnimeTitlesTableExists'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testLastUpdateTimestampStorage'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testShouldUpdateWhenNeverDownloaded'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testShouldNotUpdateWithin24Hours'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testShouldUpdateAfter24Hours'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testParseAnimeTitlesFormat'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testParseAnimeTitlesWithSpecialCharacters'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testParseAnimeTitlesSkipsComments'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void TestAnimeTitles::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<TestAnimeTitles *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->cleanup(); break;
        case 3: _t->testAnimeTitlesTableExists(); break;
        case 4: _t->testLastUpdateTimestampStorage(); break;
        case 5: _t->testShouldUpdateWhenNeverDownloaded(); break;
        case 6: _t->testShouldNotUpdateWithin24Hours(); break;
        case 7: _t->testShouldUpdateAfter24Hours(); break;
        case 8: _t->testParseAnimeTitlesFormat(); break;
        case 9: _t->testParseAnimeTitlesWithSpecialCharacters(); break;
        case 10: _t->testParseAnimeTitlesSkipsComments(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject *TestAnimeTitles::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestAnimeTitles::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestAnimeTitles.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestAnimeTitles::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 11)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 11;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 11)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 11;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
