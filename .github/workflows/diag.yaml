name: Windows Build Diagnostics (LLVM MinGW)

on:
  workflow_dispatch:
  push:
    branches: [ master, dev ]

jobs:
  diagnose-build-env:
    runs-on: windows-latest
    name: 🔍 Environment & Toolchain Report

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Qt 6.9.2 (LLVM MinGW)
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.9.2'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_llvm_mingw'
          cache: true

      - name: Restore LLVM-MinGW cache
        id: cache-llvm
        uses: actions/cache@v4
        with:
          path: C:\llvm-mingw
          key: llvm-mingw-20251007

      - name: Download LLVM-MinGW (if missing)
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          Invoke-WebRequest -Uri "https://github.com/mstorsjo/llvm-mingw/releases/download/20251007/llvm-mingw-20251007-ucrt-x86_64.zip" -OutFile "C:\llvm-mingw.zip"
          Expand-Archive -Path "C:\llvm-mingw.zip" -DestinationPath "C:\llvm-mingw"

      - name: Add LLVM-MinGW to PATH
        run: echo "C:\llvm-mingw\bin" >> $GITHUB_PATH
        shell: powershell

      - name: Create build dir
        run: mkdir -p build
        shell: bash

      - name: Configure (dry run)
        shell: bash
        run: |
          echo "=== CONFIGURING PROJECT ===" > build_info.txt
          cmake -S . -B build -G "Ninja" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER="clang.exe" \
            -DCMAKE_CXX_COMPILER="clang++.exe" \
            -DCMAKE_C_COMPILER_TARGET=x86_64-w64-mingw32 \
            -DCMAKE_CXX_COMPILER_TARGET=x86_64-w64-mingw32 \
            -DCMAKE_C_COMPILER_FRONTEND_VARIANT=GNU \
            -DCMAKE_CXX_COMPILER_FRONTEND_VARIANT=GNU \
            -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" \
            -DCMAKE_SHARED_LINKER_FLAGS="-fuse-ld=lld" \
            -DCMAKE_PREFIX_PATH="D:/a/Usagi-dono/Qt/6.9.2/llvm-mingw_64/lib/cmake" \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            2>&1 | tee -a build_info.txt

      - name: Collect diagnostic data
        shell: bash
        run: |
          echo "" >> build_info.txt
          echo "=== TOOLCHAIN VERSIONS ===" >> build_info.txt
          echo "" >> build_info.txt
          clang++ --version >> build_info.txt 2>&1
          clang --version >> build_info.txt 2>&1
          gcc --version >> build_info.txt 2>&1 || echo "gcc not found" >> build_info.txt
          cmake --version >> build_info.txt 2>&1
          ninja --version >> build_info.txt 2>&1 || echo "ninja not found" >> build_info.txt

          echo "" >> build_info.txt
          echo "=== ENVIRONMENT ===" >> build_info.txt
          echo "" >> build_info.txt
          env | sort >> build_info.txt

          echo "" >> build_info.txt
          echo "=== FILE LOCATIONS ===" >> build_info.txt
          where clang.exe >> build_info.txt 2>&1
          where clang++.exe >> build_info.txt 2>&1
          where cmake.exe >> build_info.txt 2>&1
          where ninja.exe >> build_info.txt 2>&1
          where qmake.exe >> build_info.txt 2>&1 || echo "qmake not found" >> build_info.txt
          where zlib1.dll >> build_info.txt 2>&1 || echo "zlib1.dll not found" >> build_info.txt
          where libz.a >> build_info.txt 2>&1 || echo "libz.a not found" >> build_info.txt
          where zlib.h >> build_info.txt 2>&1 || echo "zlib.h not found" >> build_info.txt

          echo "" >> build_info.txt
          echo "=== CMAKE VARIABLES (CACHE DUMP) ===" >> build_info.txt
          cmake -L build >> build_info.txt 2>&1 || echo "No CMake cache yet" >> build_info.txt

          echo "" >> build_info.txt
          echo "=== QT DETECTION ===" >> build_info.txt
          qmake --version >> build_info.txt 2>&1 || echo "qmake not found" >> build_info.txt
          dir /s /b "C:\Qt\6.9.2" >> build_info.txt 2>&1 || echo "Qt not found" >> build_info.txt

          echo "" >> build_info.txt
          echo "=== LINKER FLAGS ===" >> build_info.txt
          echo "CMAKE_EXE_LINKER_FLAGS: ${CMAKE_EXE_LINKER_FLAGS}" >> build_info.txt
          echo "CMAKE_SHARED_LINKER_FLAGS: ${CMAKE_SHARED_LINKER_FLAGS}" >> build_info.txt
          echo "" >> build_info.txt

          echo "" >> build_info.txt
          echo "=== FINAL COMPILE COMMANDS ===" >> build_info.txt
          cat build/compile_commands.json >> build_info.txt 2>/dev/null || echo "compile_commands.json not generated" >> build_info.txt

      - name: Upload diagnostic report
        uses: actions/upload-artifact@v4
        with:
          name: build-environment-report
          path: build_info.txt
