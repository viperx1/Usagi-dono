name: Windows Build & Release (Qt 6.9.2 LLVM MinGW)

on:
  push:
    branches:
      - master
      - dev
    tags:
      - 'v*.*.*'
      - 'v*.*.*-beta*'

permissions:
  contents: read
  issues: write

jobs:
  build-llvm-mingw:
    runs-on: windows-latest
    name: Build with LLVM/Clang (Qt 6.9.2 MinGW)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Qt 6.9.2 (LLVM MinGW)
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.9.2'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_llvm_mingw'
          cache: true

      - name: Install CMake and Ninja
        uses: lukka/get-cmake@latest

      # Capture logs for configure, build, and test
      - name: Configure, build, and test
        run: |
          # Try to use Clang from Qt LLVM MinGW installation if available
          # QT_ROOT_DIR is set by install-qt-action to the Qt installation directory
          # Note: Qt LLVM MinGW distributions may or may not include the compiler toolchain
          
          # Convert backslashes to forward slashes for consistent path handling
          QT_ROOT_UNIX=$(echo "${QT_ROOT_DIR}" | sed 's|\\|/|g')
          
          # Check if Qt installation includes the LLVM MinGW compiler toolchain
          if [ -f "${QT_ROOT_UNIX}/bin/clang++.exe" ]; then
            # Compilers found in Qt installation - use them
            export PATH="${QT_ROOT_UNIX}/bin:$PATH"
            export CC="${QT_ROOT_UNIX}/bin/clang.exe"
            export CXX="${QT_ROOT_UNIX}/bin/clang++.exe"
            echo "Using Clang from Qt: ${CXX}"
            "${CXX}" --version || echo "Warning: Failed to run clang++ --version"
            
            cmake -G "Ninja" -S . -B build -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_COMPILER="${CC}" \
              -DCMAKE_CXX_COMPILER="${CXX}" 2>&1 | tee build_log.txt
          else
            # Qt installation doesn't include compilers - let CMake auto-detect
            echo "Note: Qt LLVM MinGW installation does not include compiler toolchain"
            echo "CMake will auto-detect available compilers"
            echo "QT_ROOT_DIR=${QT_ROOT_DIR}"
            
            # Try to find clang++ in PATH
            if command -v clang++ &> /dev/null; then
              CLANG_PATH=$(command -v clang++)
              echo "Found Clang in PATH: ${CLANG_PATH}"
              export CC="clang.exe"
              export CXX="clang++.exe"
              cmake -G "Ninja" -S . -B build -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_C_COMPILER="${CC}" \
                -DCMAKE_CXX_COMPILER="${CXX}" 2>&1 | tee build_log.txt
            else
              echo "Clang not found in PATH, using default system compiler"
              cmake -G "Ninja" -S . -B build -DCMAKE_BUILD_TYPE=Release 2>&1 | tee build_log.txt
            fi
          fi
          
          cmake --build build --config Release 2>&1 | tee -a build_log.txt
          ctest --output-on-failure --test-dir build 2>&1 | tee -a build_log.txt
        shell: bash

      - name: Upload build artifact (Alpha, LLVM)
        if: success() && github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')
        uses: actions/upload-artifact@v4
        with:
          name: Usagi-dono-alpha-llvm
          path: |
            build/**/*.exe
            build/**/*.pdb

      - name: Create Release & Upload (Stable/Beta, LLVM)
        if: success() && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            build/usagi/*.exe
            build/usagi/*.pdb
            build/tests/*.exe
            build/tests/*.pdb

      # ðŸ‘‡ The magic failure handler
      - name: Create issue with build/test logs on failure
        if: failure()
        run: |
          echo "ðŸš¨ **Build failed for workflow:** ${{ github.workflow }}" > issue_body.md
          echo "" >> issue_body.md
          echo "**Branch/Tag:** ${{ github.ref }}" >> issue_body.md
          echo "**Commit:** ${{ github.sha }}" >> issue_body.md
          echo "" >> issue_body.md
          echo "### Logs (truncated to last 500 lines)" >> issue_body.md
          echo '```' >> issue_body.md
          tail -n 500 build_log.txt >> issue_body.md
          echo '```' >> issue_body.md
          echo "" >> issue_body.md
          echo "[View full logs here](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> issue_body.md

          gh issue create \
            --title "ðŸš¨ Build failed: ${{ github.workflow }} on ${{ github.ref }}" \
            --body-file issue_body.md \
            --label ci-failure,bug
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
